2.
Uruchamiając
    mvn compile exec:java -D exec.mainClass=org.example.zad1_2.Main -D exec.args="if"
można przetestować semafor zaimplementowany przy użyciu if.
Przykładowy wynik programu (podsumowanie):
    Counters' final values: [-11, -1, -4, 9, -2, 12, -12, -12, -20, -2, -8, 10, -24, -2, -2, -11, -5, 1, -1, 5, -2, -11, 5, -9, -4]

Uruchamiając
    mvn compile exec:java -D exec.mainClass=org.example.zad1_2.Main -D exec.args="while"
można przetestować semafor zaimplementowany przy użyciu while.
Przykładowy wynik programu (podsumowanie):
    Counters' final values: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Jak widać semafor wykorzystujący instrukcję if daje różne końcowe wyniki, w przeciwieństwie do semafora
zaimplementowanego przy użyciu instrukcji while.

Powód:
rozważmy następującą sytuację:
    zakładając, że P() - lock semafora, V() - unlock semafora
    - wątek 1 (W1) - czeka w P()
    - wątek 2 (W2) - zamierza wejść do P()
    - wątek 3 (W3) - znajduje się w sekcji krytycznej

wykonując kroki:
    1. mutex na P() jest wolny (W1, które tutaj czeka nie zajmuje go!), W2 wchodzi do P()
    2. W3 wykonuje V() i wywołuje notify() oraz zmienia stan semafora na otwarty
    3. W1 przestaje czekać (dzięki wywołaniu notify()) i oczekuje na zwolnienie mutexu (zajmowany przez W2)
    4. W2 sprawdza stan semafora, jest otwarty więc nie zasypia i kończy P()
    5. Został zwolniony mutex na P() więc W1 kończy P()
    6. W1 i W2 znajdują się jednocześnie w sekcji krytycznej!

Istnieje też inna możliwość:
    Wątek może się wybudzić nawet gdy nie zostały wywołane notify() lub notifyAll().
    W takiej sytuacji stosując while sprawdzamy ponownie warunek i gdy okaże się, że semafor nie jest w stanie
    zezwalającym na dostęp do sekcji krytycznej, nie naruszymy jej; if by do niej dopuścił.
    Źródła: https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#wait()
            https://en.wikipedia.org/wiki/Spurious_wakeup

3.
Uruchamiając
    mvn compile exec:java -D exec.mainClass=org.example.zad3.Main
można przetestować semafor zliczający (ogólny).
Program symuluje użytkowników korzystających z pewnej ilości wspólnych zasobów.
Przykładowy wynik programu:
    Thread 21 performs an activity on the resource
    Thread 23 performs an activity on the resource
    Thread 24 performs an activity on the resource
    Thread 22 performs an activity on the resource
    Thread 23 returns the resource to the pool
    Thread 22 returns the resource to the pool
    Thread 24 returns the resource to the pool
    Thread 25 performs an activity on the resource
    Thread 21 returns the resource to the pool
    Thread 26 performs an activity on the resource
    Thread 28 performs an activity on the resource
    Thread 25 returns the resource to the pool
    Thread 27 performs an activity on the resource
    Thread 29 performs an activity on the resource
    Thread 28 returns the resource to the pool
    Thread 29 returns the resource to the pool
    Thread 26 returns the resource to the pool
    Thread 33 performs an activity on the resource
    Thread 30 performs an activity on the resource
    Thread 27 returns the resource to the pool
    Thread 30 returns the resource to the pool
    Thread 33 returns the resource to the pool
    Thread 31 performs an activity on the resource
    Thread 32 performs an activity on the resource
    Thread 31 returns the resource to the pool
    Thread 32 returns the resource to the pool

Semafor binarny jest szczególnym przypadkiem semafora ogólnego.
Jest to semafor ogólny o początkowej ilości dostępnych zasobów równej 1.
